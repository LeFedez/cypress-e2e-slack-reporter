name: 'Cypress E2E Regression Tests with Slack Notification'
description: 'Runs Cypress E2E tests, generates Mochawesome reports, and notifies detailed results to Slack.'
author: 'LeFedez' 

branding:
  icon: 'bell'      
  color: 'blue'   

inputs:
  node-version:
    description: 'The Node.js version to use for running Cypress tests. E.g.: "18" or "20".'
    required: false 
    default: '18'   

  cypress-command:
    description: 'The full command to run Cypress. Useful for customizing options like recording or using a specific browser.'
    required: false 
    default: 'npx cypress run --reporter mochawesome --reporter-options reportDir=cypress/results,overwrite=false,html=true,json=true' # Default Cypress command

  slack-webhook:
    description: 'Very important! The secret for your Slack Webhook URL. You must store it in the GitHub Secrets of the repository using this action.'
    required: true

  slack-username:
    description: 'The bot name that will appear in the Slack notification.'
    required: false
    default: 'CyBot'

  slack-icon:
    description: 'The URL of an image for the bot icon in Slack. This image will appear in the Slack notification.'
    required: false # 
    default: 'https://pbs.twimg.com/profile_images/1512090708181725184/KAPAXmDg_400x400.jpg' # Default icon 
    

  slack-title:
    description: 'The main title of the Slack message. It will appear prominently in the notification.'
    required: false 
    default: '*Cypress E2E Test Results*'  # Default title for the Slack notification

  continue-on-cypress-error:
    description: 'If "true", the action will continue (and send the Slack notification) even if Cypress tests fail. If "false", the action will stop if they fail.'
    required: false 
    default: 'true' # Default behavior: always send Slack notification, even if tests fail.

runs:
  using: "composite" 
  steps:
    - name: Checkout Code
      uses: actions/checkout@v3
    - name: Setup Node.js Environment
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: Install Project Dependencies
      shell: bash 
      run: npm install 

    - name: Run Cypress Tests with Mochawesome
      shell: bash
      run: ${{ inputs.cypress-command }} 
      continue-on-error: ${{ fromJSON(inputs.continue-on-cypress-error) }} 
      
    - name: Debug - List Cypress Results
      if: always() # Ejecutar siempre para depuraci√≥n
      shell: bash
      run: |
        echo "Listing contents of cypress/results:"
        ls -l cypress/results/
        echo "Checking for mochawesome.json size:"
        if [ -f cypress/results/mochawesome.json ]; then
          stat -c %s cypress/results/mochawesome.json
        else
          echo "mochawesome.json not found."
        fi  

    - name: Extract Test Summary
      if: always()
      shell: bash
      run: |
        # Installs 'jq' (JSON processor) as it may not be pre-installed on all runners.
        # This ensures the script can parse the Mochawesome JSON report.
        sudo apt-get update && sudo apt-get install -y jq

        RESULTS_FILE="cypress/results/mochawesome.json"
        
        # Checks if the Mochawesome report file exists. If not, default counts will be 0 and color will be red.
        if [ ! -f "$RESULTS_FILE" ]; then
          echo "WARNING: Mochawesome results file '$RESULTS_FILE' not found. Defaulting test counts to 0."
          echo "PASSED_TESTS=0" >> $GITHUB_ENV
          echo "FAILED_TESTS=0" >> $GITHUB_ENV
          echo "SKIPPED_TESTS=0" >> $GITHUB_ENV
          echo "PENDING_TESTS=0" >> $GITHUB_ENV 
          echo "TOTAL_TESTS=0" >> $GITHUB_ENV
          echo "SLACK_DYNAMIC_COLOR=danger" >> $GITHUB_ENV # Sets color to red if no results found
        else
          # Parses the Mochawesome JSON report to get test statistics.
          echo "PASSED_TESTS=$(jq '.stats.passes' \"$RESULTS_FILE\")" >> $GITHUB_ENV
          echo "FAILED_TESTS=$(jq '.stats.failures' \"$RESULTS_FILE\")" >> $GITHUB_ENV
          echo "SKIPPED_TESTS=$(jq '.stats.skipped' \"$RESULTS_FILE\")" >> $GITHUB_ENV
          echo "PENDING_TESTS=$(jq '.stats.pending' \"$RESULTS_FILE\")" >> $GITHUB_ENV
          echo "TOTAL_TESTS=$(jq '.stats.tests' \"$RESULTS_FILE\")" >> "$GITHUB_ENV"

          # Determines the Slack notification color based on test failures.
          if [ "$(jq '.stats.failures' \"$RESULTS_FILE\")" -gt 0 ]; then
            echo "SLACK_DYNAMIC_COLOR=danger" >> $GITHUB_ENV # Red for failures
          else
            echo "SLACK_DYNAMIC_COLOR=good" >> $GITHUB_ENV  # Green for success
          fi
        fi

    - name: Send Slack Notification
      if: always() 
      uses: rtCamp/action-slack-notify@v2
      env: 
        SLACK_COLOR: ${{ env.SLACK_DYNAMIC_COLOR }} 
        SLACK_USERNAME: ${{ inputs.slack-username }}
        SLACK_ICON: ${{ inputs.slack-icon }}       
        SLACK_MESSAGE: |
          üìä Total: *${{ env.TOTAL_TESTS }}*
          ‚úÖ Passed: *${{ env.PASSED_TESTS }}*
          ‚ùå Failed: *${{ env.FAILED_TESTS }}*
          ‚ö™Ô∏è Skipped: *${{ env.SKIPPED_TESTS }}*
          ‚è≥ Pending: *${{ env.PENDING_TESTS }}*
          
          üîó Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        SLACK_TITLE: ${{ inputs.slack-title }}  
        SLACK_WEBHOOK: ${{ inputs.slack-webhook }} 
        SLACK_FOOTER: '' 
        MSG_MINIMAL: true