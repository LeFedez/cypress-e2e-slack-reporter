name: 'Cypress Tests Slack Notification'
description: Runs Cypress E2E tests, generates Mochawesome reports, and sends detailed test results to Slack.
author: 'LeFedez' 

branding:
  icon: 'bell'      
  color: 'blue'   

inputs:
  node-version:
    description: 'The Node.js version to use for running Cypress tests. E.g.: "18" or "20".'
    required: false 
    default: '18'   

  cypress-command:
    description: 'The full command to run Cypress. Useful for customizing options like recording or using a specific browser.'
    required: false 
    default: 'npx cypress run --reporter mochawesome --reporter-options reportDir=cypress/results,overwrite=false,html=true,json=true' # Comando Cypress por defecto

  slack-webhook:
    description: 'Very important! The secret for your Slack Webhook URL. You must store it in the GitHub Secrets of the repository using this action.'
    required: true

  slack-username:
    description: 'The bot name that will appear in the Slack notification.'
    required: false
    default: 'CyBot'

  slack-icon:
    description: 'The URL of an image for the bot icon in Slack. This image will appear in the Slack notification.'
    required: false # 
    default: 'https://pbs.twimg.com/profile_images/1512090708181725184/KAPAXmDg_400x400.jpg' # Icono por defecto 
    

  slack-title:
    description: 'The main title of the Slack message. It will appear prominently in the notification.'
    required: false 
    default: '*Cypress E2E Test Results*' 

  continue-on-cypress-error:
    description: 'If "true", the action will continue (and send the Slack notification) even if Cypress tests fail. If "false", the action will stop if they fail.'
    required: false 
    default: 'true' 

runs:
  using: "composite" 
  steps:
    - name: Checkout Code
      uses: actions/checkout@v3
    - name: Setup Node.js Environment
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: Install dependencies
      shell: bash
      run: npm ci
      
    # Paso 3.5: Depuraci√≥n - Verificar entorno y PATH
    - name: Debug - Verify Node and Cypress Installation
      shell: bash
      run: |
            echo "--- Debugging Node/Cypress environment ---"
            echo "Node.js version:"
            node -v || echo "Node.js not found in PATH"
            echo "npm version:"
            npm -v || echo "npm not found in PATH"
            echo "PATH environment variable:"
            echo $PATH
            echo "Checking if npx is available:"
            which npx || echo "npx not found in PATH"
            echo "Checking if Cypress is available via npx:"
            npx cypress --version || echo "Cypress not found via npx"
            echo "--- End Debugging ---"    

    - name: Run Cypress Tests with Mochawesome
      shell: bash
      run: ${{ inputs.cypress-command }} 
      continue-on-error: ${{ fromJSON(inputs.continue-on-cypress-error) }} 
      
    - name: Debug - List Cypress Results
      if: always()
      shell: bash
      run: |
        echo "Listing contents of cypress/results:"
        ls -l cypress/results/
        echo "Checking for mochawesome.json size:"
        if [ -f cypress/results/mochawesome.json ]; then
          stat -c %s cypress/results/mochawesome.json
        else
          echo "mochawesome.json not found."
        fi  

    - name: Extract Test Summary
      if: always()
      shell: bash
      run: |
        echo "--- Starting Extract Test Summary ---"
            # Installs 'jq' (JSON processor) as it may not be pre-installed on all runners.
            sudo apt-get update && sudo apt-get install -y jq || { echo "ERROR: Failed to install jq. Exiting."; exit 1; }

            # Defines the absolute path to the Mochawesome results file.
            # GITHUB_WORKSPACE is the path where your repository is cloned.
            MOCHAWESOME_RESULTS_DIR="${{ github.workspace }}/cypress/results"
            RESULTS_FILE="${MOCHAWESOME_RESULTS_DIR}/mochawesome.json"
            HTML_FILE="${MOCHAWESOME_RESULTS_DIR}/mochawesome.html"

            echo "Cypress results directory: ${MOCHAWESOME_RESULTS_DIR}"
            echo "Expected JSON file: ${RESULTS_FILE}"
            echo "Expected HTML file: ${HTML_FILE}"

            # Lists the contents of the results folder for debugging.
            echo "Contents of cypress/results/ before parsing:"
            ls -al "${MOCHAWESOME_RESULTS_DIR}" || { echo "WARNING: cypress/results directory not found or empty."; }

            # Checks if the Mochawesome report file exists. If not, default counts will be 0 and color will be red.
            if [ ! -f "$RESULTS_FILE" ]; then
              echo "ERROR: Mochawesome results JSON file '$RESULTS_FILE' not found. Defaulting test counts to 0 and setting color to danger."
              echo "PASSED_TESTS=0" >> $GITHUB_ENV
              echo "FAILED_TESTS=0" >> $GITHUB_ENV
              echo "SKIPPED_TESTS=0" >> $GITHUB_ENV
              echo "PENDING_TESTS=0" >> $GITHUB_ENV 
              echo "TOTAL_TESTS=0" >> $GITHUB_ENV
              echo "SLACK_DYNAMIC_COLOR=danger" >> $GITHUB_ENV # Establece el color a rojo si no se encuentran resultados
              # This will also prevent jq from failing when trying to read a non-existent file.
            else
              echo "Mochawesome results JSON file found. Parsing..."
              # Parses the Mochawesome JSON report to get the test statistics.
              # We use `|| echo "0"` to ensure that if jq does not find the key, the default value is 0.
              echo "PASSED_TESTS=$(jq '.stats.passes // 0' "$RESULTS_FILE")" >> $GITHUB_ENV
              echo "FAILED_TESTS=$(jq '.stats.failures // 0' "$RESULTS_FILE")" >> $GITHUB_ENV
              echo "SKIPPED_TESTS=$(jq '.stats.skipped // 0' "$RESULTS_FILE")" >> $GITHUB_ENV
              echo "PENDING_TESTS=$(jq '.stats.pending // 0' "$RESULTS_FILE")" >> $GITHUB_ENV
              echo "TOTAL_TESTS=$(jq '.stats.tests // 0' "$RESULTS_FILE")" >> "$GITHUB_ENV"

              # Determines the Slack notification color based on test failures.
              if [ "$(jq '.stats.failures // 0' "$RESULTS_FILE")" -gt 0 ]; then
                echo "SLACK_DYNAMIC_COLOR=danger" >> $GITHUB_ENV # Red for failures
              else
                echo "SLACK_DYNAMIC_COLOR=good" >> $GITHUB_ENV  # Green for success
              fi
              echo "Test counts extracted: Passed=${PASSED_TESTS}, Failed=${FAILED_TESTS}, Skipped=${SKIPPED_TESTS}, Pending=${PENDING_TESTS}, Total=${TOTAL_TESTS}"
            fi
            echo "--- Finished Extract Test Summary ---"
    - name: Send Slack Notification
      if: always() 
      uses: rtCamp/action-slack-notify@v2
      env: 
        SLACK_COLOR: ${{ env.SLACK_DYNAMIC_COLOR }} 
        SLACK_USERNAME: ${{ inputs.slack-username }}
        SLACK_ICON: ${{ inputs.slack-icon }}       
        SLACK_MESSAGE: |
          üìä Total: *${{ env.TOTAL_TESTS }}*
          ‚úÖ Passed: *${{ env.PASSED_TESTS }}*
          ‚ùå Failed: *${{ env.FAILED_TESTS }}*
          ‚ö™Ô∏è Skipped: *${{ env.SKIPPED_TESTS }}*
          ‚è≥ Pending: *${{ env.PENDING_TESTS }}*
          
          üîó Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        SLACK_TITLE: ${{ inputs.slack-title }}  
        SLACK_WEBHOOK: ${{ inputs.slack-webhook }} 
        SLACK_FOOTER: '' 
        MSG_MINIMAL: true