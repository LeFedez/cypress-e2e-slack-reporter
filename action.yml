# action.yml
# ¬°ASEG√öRATE DE QUE 'name:' ES LA PRIMERA COSA EN LA PRIMERA L√çNEA, SIN ESPACIOS ANTES!
name: 'Cypress E2E Regression Tests with Slack Notification'
description: 'Ejecuta pruebas Cypress E2E, genera reportes Mochawesome y notifica los resultados detallados a Slack.'
author: 'Tu Nombre / Tu Organizaci√≥n' # <-- ¬°IMPORTANTE! CAMBIA ESTO.

branding:
  icon: 'bell'      # Icono de Octicons (por ejemplo: bell, paper-airplane, megaphone)
  color: 'blue'     # Color de fondo del icono (por ejemplo: blue, green, red, yellow, purple, orange, gray, white)

inputs:
  node-version:
    description: 'La versi√≥n de Node.js a usar para ejecutar las pruebas Cypress. Ej: "18" o "20".'
    required: false
    default: '18'
  cypress-command:
    description: 'El comando completo para ejecutar Cypress. √ötil para personalizar opciones como grabar o usar un navegador espec√≠fico.'
    required: false
    default: 'npx cypress run --reporter mochawesome --reporter-options reportDir=cypress/results,overwrite=false,html=true,json=true'
  slack-webhook:
    description: '¬°Muy importante! El secreto para tu URL del Webhook de Slack. Necesitas guardarlo en tus Secretos de GitHub.'
    required: true
  slack-username:
    description: 'El nombre que aparecer√° en la notificaci√≥n de Slack. Como si tu bot tuviera un nombre.'
    required: false
    default: 'CyBot'
  slack-icon:
    description: 'La URL de una imagen para el icono del bot en Slack. Para que tu bot tenga una cara.'
    required: false
    default: 'https://drive.google.com/file/d/1FE6DMUhnD3Pwa2xJBSHDBqE1lm3Enrvn/view?usp=sharing'
  slack-title:
    description: 'El t√≠tulo principal del mensaje de Slack. Aparecer√° en grande en la notificaci√≥n.'
    required: false
    default: 'Cypress E2E Test Results'
  continue-on-cypress-error:
    description: 'Si es "true", la acci√≥n seguir√° ejecut√°ndose (y enviar√° la notificaci√≥n a Slack) incluso si las pruebas de Cypress fallan. Si es "false", la acci√≥n se detendr√° si fallan.'
    required: false
    default: 'true'

runs:
  using: "composite"
  steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup Node.js Environment
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: Install Project Dependencies
      shell: bash
      # Aqu√≠, tu acci√≥n asume que tienes un 'package.json' y un 'package-lock.json'
      # en el repositorio donde se usa la acci√≥n.
      # Para la prueba, necesitas esto en TU repositorio de acci√≥n tambi√©n.
      run: npm install
        # Si NO tienes un archivo package.json para tu acci√≥n (solo para el proyecto que la usa):
        # Puedes remover esta l√≠nea si tu acci√≥n no tiene dependencias npm propias.
        # PERO, para la ejecuci√≥n de Cypress, *el proyecto donde se usa la acci√≥n* DEBE tener un package.json
        # y sus dependencias de Cypress instaladas.
        
        # Para que esta acci√≥n funcione con el comando "npx cypress run",
        # el proyecto que la usa debe tener Cypress instalado como dependencia.
        # Si tu acci√≥n en s√≠ tiene dependencias Node.js propias (ej. scripts auxiliares),
        # estas ir√≠an aqu√≠. Para esta acci√≥n COMPOSITE, el 'npm ci'
        # se refiere a las dependencias del REPOSITORIO DONDE SE EST√Å USANDO LA ACCI√ìN.
        # Por lo tanto, en tu REPOSITORIO DE PRUEBA (donde est√° test.yml),
        # tambi√©n debes tener un package.json con Cypress para que este paso funcione.
        npm ci

    - name: Run Cypress Tests with Mochawesome
      shell: bash
      run: ${{ inputs.cypress-command }}
      continue-on-error: ${{ fromJSON(inputs.continue-on-cypress-error) }}

    - name: Extract Test Summary
      if: always()
      shell: bash
      run: |
        # Instalar 'jq' si no est√° disponible (necesario para parsear JSON)
        sudo apt-get update && sudo apt-get install -y jq

        RESULTS_FILE="cypress/results/mochawesome.json"
        
        if [ ! -f "$RESULTS_FILE" ]; then
          echo "WARNING: Mochawesome results file '$RESULTS_FILE' not found. Defaulting test counts to 0."
          echo "PASSED_TESTS=0" >> $GITHUB_ENV
          echo "FAILED_TESTS=0" >> $GITHUB_ENV
          echo "SKIPPED_TESTS=0" >> $GITHUB_ENV
          echo "TOTAL_TESTS=0" >> $GITHUB_ENV
          echo "SLACK_DYNAMIC_COLOR=danger" >> $GITHUB_ENV 
        else
          echo "PASSED_TESTS=$(jq '.stats.passes' "$RESULTS_FILE")" >> $GITHUB_ENV
          echo "FAILED_TESTS=$(jq '.stats.failures' "$RESULTS_FILE")" >> $GITHUB_ENV
          echo "SKIPPED_TESTS=$(jq '.stats.skipped' "$RESULTS_FILE")" >> $GITHUB_ENV
          echo "TOTAL_TESTS=$(jq '.stats.tests' "$RESULTS_FILE")" >> "$GITHUB_ENV"

          if [ "$(jq '.stats.failures' "$RESULTS_FILE")" -gt 0 ]; then
            echo "SLACK_DYNAMIC_COLOR=danger" >> $GITHUB_ENV
          else
            echo "SLACK_DYNAMIC_COLOR=good" >> $GITHUB_ENV
          fi
        fi

    - name: Send Slack Notification
      if: always()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: ${{ env.SLACK_DYNAMIC_COLOR }}
        SLACK_USERNAME: ${{ inputs.slack-username }}
        SLACK_ICON: ${{ inputs.slack-icon }}
        SLACK_MESSAGE: |
          *Resultados de Pruebas Cypress* para el commit `<https://github.com/${{ github.repository }}/commit/${{ github.sha }}>` en la rama `${{ github.ref_name }}`
          
          üìä Total: ${{ env.TOTAL_TESTS }} | ‚úÖ Pasadas: ${{ env.PASSED_TESTS }} | ‚ùå Fallidas: ${{ env.FAILED_TESTS }} | ‚ö™Ô∏è Saltadas: ${{ env.SKIPPED_TESTS }}
          
          üîó Ver workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        SLACK_TITLE: ${{ inputs.slack-title }}
        SLACK_WEBHOOK: ${{ inputs.slack-webhook }}