# action.yml
# Este archivo define tu GitHub Action.
# Aseg√∫rate de que la primera l√≠nea 'name:' comience en la columna 1 (sin espacios al inicio).

name: 'Cypress E2E Regression Tests with Slack Notification'
description: 'Ejecuta pruebas Cypress E2E, genera reportes Mochawesome y notifica los resultados detallados a Slack.'
author: 'Tu Nombre / Tu Organizaci√≥n' # <-- IMPORTANTE: Cambia esto a tu nombre de usuario de GitHub o nombre de tu organizaci√≥n.

# La secci√≥n 'branding' define c√≥mo se ve tu acci√≥n en el GitHub Marketplace.
# Puedes elegir iconos de Octicons y colores espec√≠ficos.
# M√°s iconos de Octicons aqu√≠: https://octicons.github.com/
branding:
  icon: 'bell'      # Icono recomendado para notificaciones (ej: 'bell', 'paper-airplane', 'megaphone')
  color: 'blue'     # Color recomendado para notificaciones (ej: 'blue', 'green', 'red', 'yellow', 'purple', 'orange', 'gray', 'white')

# La secci√≥n 'inputs' define los par√°metros que los usuarios pueden proporcionar al usar tu acci√≥n.
# Cada input tiene una descripci√≥n, un estado 'required' (requerido), y un valor 'default' (por defecto) opcional.
inputs:
  node-version:
    description: 'La versi√≥n de Node.js a usar para ejecutar las pruebas Cypress. Ej: "18" o "20".'
    required: false # Este input es opcional
    default: '18'   # Versi√≥n de Node.js por defecto si no es especificada por el usuario

  cypress-command:
    description: 'El comando completo para ejecutar Cypress. √ötil para personalizar opciones como grabar o usar un navegador espec√≠fico.'
    required: false # Este input es opcional
    default: 'npx cypress run --reporter mochawesome --reporter-options reportDir=cypress/results,overwrite=false,html=true,json=true' # Comando Cypress por defecto

  slack-webhook:
    description: '¬°Muy importante! El secreto para tu URL del Webhook de Slack. Debes guardarlo en los Secretos de GitHub del repositorio que use esta acci√≥n.'
    required: true # Este input es OBLIGATORIO. La acci√≥n no puede enviar notificaciones de Slack sin √©l.

  slack-username:
    description: 'El nombre del bot que aparecer√° en la notificaci√≥n de Slack.'
    required: false # Este input es opcional
    default: 'CyBot' # Nombre de usuario por defecto para el bot de Slack

  slack-icon:
    description: 'La URL de una imagen para el icono del bot en Slack. Esta imagen aparecer√° en la notificaci√≥n de Slack.'
    required: false # Este input es opcional
    default: 'https://pbs.twimg.com/profile_images/1512090708181725184/KAPAXmDg_400x400.jpg' # Icono por defecto para el bot de Slack (logo de Cypress)
    # Puedes cambiar esto a la URL p√∫blica de tu imagen preferida, ej: 'https://github.com/tu-usuario.png'

  slack-title:
    description: 'El t√≠tulo principal del mensaje de Slack. Aparecer√° en grande en la notificaci√≥n.'
    required: false # Este input es opcional
    default: 'Cypress E2E Test Results' # T√≠tulo por defecto para la notificaci√≥n de Slack

  continue-on-cypress-error:
    description: 'Si es "true", la acci√≥n seguir√° ejecut√°ndose (y enviar√° la notificaci√≥n a Slack) incluso si las pruebas de Cypress fallan. Si es "false", la acci√≥n se detendr√° si fallan.'
    required: false # Este input es opcional
    default: 'true' # Comportamiento por defecto: siempre enviar notificaci√≥n de Slack, incluso si las pruebas fallan.

# La secci√≥n 'runs' define c√≥mo se ejecuta tu acci√≥n.
# 'composite' significa que tu acci√≥n consiste en m√∫ltiples comandos de shell y otras acciones.
runs:
  using: "composite" # Indica que es una acci√≥n compuesta, ejecutando una secuencia de pasos.
  steps:
    # Paso 1: Descarga el c√≥digo del repositorio. Esto es esencial para que la acci√≥n
    # acceda a tus archivos de prueba de Cypress y package.json.
    - name: Checkout Code
      uses: actions/checkout@v3

    # Paso 2: Configura el entorno de Node.js con la versi√≥n especificada.
    - name: Setup Node.js Environment
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }} # Usa el input 'node-version' proporcionado por el usuario.

    # Paso 3: Instala las dependencias del proyecto (Cypress, Mochawesome, etc.).
    # Este paso asume que un 'package.json' y un 'package-lock.json' (o 'npm-shrinkwrap.json')
    # existen en el repositorio donde se est√° usando esta acci√≥n (y tambi√©n en el repositorio de ESTA acci√≥n para pruebas).
    - name: Install Project Dependencies
      shell: bash # Ejecuta el comando usando bash shell
      run: npm install # 'npm ci' requiere un package-lock.json para instalaciones consistentes.

    # Paso 4: Ejecuta las pruebas de Cypress usando el comando proporcionado.
    # 'continue-on-error' asegura que el flujo de trabajo contin√∫e incluso si las pruebas de Cypress fallan,
    # para que la notificaci√≥n de Slack pueda ser enviada de todas formas.
    - name: Run Cypress Tests with Mochawesome
      shell: bash
      run: ${{ inputs.cypress-command }} # Usa el input 'cypress-command'.
      continue-on-error: ${{ fromJSON(inputs.continue-on-cypress-error) }} # Convierte el input de cadena a booleano.

    # Paso 5: Extrae el resumen de las pruebas (pasadas, fallidas, saltadas) del reporte de Mochawesome.
    # Este paso se ejecuta 'always()' para asegurar que la notificaci√≥n de Slack pueda enviarse incluso si las pruebas fallan o el paso anterior tuvo un error.
    - name: Extract Test Summary
      if: always() # Asegura que este paso se ejecute sin importar el resultado del paso anterior.
      shell: bash
      run: |
        # Instala 'jq' (procesador de JSON) ya que podr√≠a no estar preinstalado en todos los runners.
        # Esto asegura que el script pueda parsear el reporte JSON de Mochawesome.
        sudo apt-get update && sudo apt-get install -y jq

        RESULTS_FILE="cypress/results/mochawesome.json"
        
        # Verifica si el archivo de reporte de Mochawesome existe. Si no, las cuentas por defecto ser√°n 0 y el color ser√° rojo.
        if [ ! -f "$RESULTS_FILE" ]; then
          echo "WARNING: Mochawesome results file '$RESULTS_FILE' not found. Defaulting test counts to 0."
          echo "PASSED_TESTS=0" >> $GITHUB_ENV
          echo "FAILED_TESTS=0" >> $GITHUB_ENV
          echo "SKIPPED_TESTS=0" >> $GITHUB_ENV
          echo "PENDING_TESTS=0" >> $GITHUB_ENV 
          echo "TOTAL_TESTS=0" >> $GITHUB_ENV
          echo "SLACK_DYNAMIC_COLOR=danger" >> $GITHUB_ENV # Establece el color a rojo si no se encuentran resultados
        else
          # Parsea el reporte JSON de Mochawesome para obtener las estad√≠sticas de las pruebas.
          echo "PASSED_TESTS=$(jq '.stats.passes' "$RESULTS_FILE")" >> $GITHUB_ENV
          echo "FAILED_TESTS=$(jq '.stats.failures' "$RESULTS_FILE")" >> $GITHUB_ENV
          echo "SKIPPED_TESTS=$(jq '.stats.skipped' "$RESULTS_FILE")" >> $GITHUB_ENV
          echo "PENDING_TESTS=$(jq '.stats.pending' "$RESULTS_FILE")" >> $GITHUB_ENV
          echo "TOTAL_TESTS=$(jq '.stats.tests' "$RESULTS_FILE")" >> "$GITHUB_ENV"

          # Determina el color de la notificaci√≥n de Slack bas√°ndose en los fallos de las pruebas.
          if [ "$(jq '.stats.failures' "$RESULTS_FILE")" -gt 0 ]; then
            echo "SLACK_DYNAMIC_COLOR=danger" >> $GITHUB_ENV # Rojo para fallos
          else
            echo "SLACK_DYNAMIC_COLOR=good" >> $GITHUB_ENV  # Verde para √©xito
          fi
        fi

    # Paso 6: Env√≠a el resumen de los resultados de las pruebas a Slack.
    # Este paso tambi√©n se ejecuta 'always()' para asegurar que la notificaci√≥n se env√≠e sin importar los resultados de las pruebas.
    - name: Send Slack Notification
      if: always() # Asegura que este paso se ejecute sin importar el resultado del paso anterior.
      uses: rtCamp/action-slack-notify@v2 # Usa una GitHub Action preconstruida para notificaciones de Slack.
      env: # Variables de entorno pasadas a la acci√≥n de notificaci√≥n de Slack.
        SLACK_COLOR: ${{ env.SLACK_DYNAMIC_COLOR }} # Usa el color determinado din√°micamente (verde/rojo).
        SLACK_USERNAME: ${{ inputs.slack-username }} # Usa el input 'slack-username'.
        SLACK_ICON: ${{ inputs.slack-icon }}         # Usa el input 'slack-icon'.
        SLACK_MESSAGE: | # El contenido principal del mensaje de Slack, formateado usando Markdown.
          
          Commit: `<https://github.com/${{ github.repository }}/commit/${{ github.sha }}>`Rama: `${{ github.ref_name }}`
          
          üìä Total: *${{ env.TOTAL_TESTS }}*
          ‚úÖ Passed: *${{ env.PASSED_TESTS }}*
          ‚ùå Failed: *${{ env.FAILED_TESTS }}*
          ‚ö™Ô∏è Skipped: *${{ env.SKIPPED_TESTS }}*
          ‚è≥ Pending: *${{ env.PENDING_TESTS }}*
          
          üîó Ver workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        SLACK_TITLE: ${{ inputs.slack-title }} # Usa el input 'slack-title'.
        SLACK_WEBHOOK: ${{ inputs.slack-webhook }} # Usa el input 'slack-webhook' (de los secretos).
        SLACK_FOOTER: '' # <-- Establece a cadena vac√≠a para eliminar el pie de p√°gina "Powered By...".
        SLACK_AUTHOR: null # <-- Establece a cadena vac√≠a para eliminar los detalles de autor/commit/ref.