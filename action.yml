name: 'Cypress E2E Regression Tests with Slack Notification'
description: 'Ejecuta pruebas Cypress E2E, genera reportes Mochawesome y notifica los resultados detallados a Slack.'
author: 'LeFedez' 

branding:
  icon: 'bell'      
  color: 'blue'   

inputs:
  node-version:
    description: 'La versi√≥n de Node.js a usar para ejecutar las pruebas Cypress. Ej: "18" o "20".'
    required: false 
    default: '18'   

  cypress-command:
    description: 'El comando completo para ejecutar Cypress. √ötil para personalizar opciones como grabar o usar un navegador espec√≠fico.'
    required: false 
    default: 'npx cypress run --reporter mochawesome --reporter-options reportDir=cypress/results,overwrite=false,html=true,json=true' # Comando Cypress por defecto

  slack-webhook:
    description: '¬°Muy importante! El secreto para tu URL del Webhook de Slack. Debes guardarlo en los Secretos de GitHub del repositorio que use esta acci√≥n.'
    required: true

  slack-username:
    description: 'El nombre del bot que aparecer√° en la notificaci√≥n de Slack.'
    required: false
    default: 'CyBot'

  slack-icon:
    description: 'La URL de una imagen para el icono del bot en Slack. Esta imagen aparecer√° en la notificaci√≥n de Slack.'
    required: false # 
    default: 'https://pbs.twimg.com/profile_images/1512090708181725184/KAPAXmDg_400x400.jpg' # Icono por defecto 
    

  slack-title:
    description: 'El t√≠tulo principal del mensaje de Slack. Aparecer√° en grande en la notificaci√≥n.'
    required: false 
    default: '*Cypress E2E Test Results*'  # T√≠tulo por defecto para la notificaci√≥n de Slack

  continue-on-cypress-error:
    description: 'Si es "true", la acci√≥n seguir√° ejecut√°ndose (y enviar√° la notificaci√≥n a Slack) incluso si las pruebas de Cypress fallan. Si es "false", la acci√≥n se detendr√° si fallan.'
    required: false 
    default: 'true' # Comportamiento por defecto: siempre enviar notificaci√≥n de Slack, incluso si las pruebas fallan.

runs:
  using: "composite" 
  steps:
    - name: Checkout Code
      uses: actions/checkout@v3
    - name: Setup Node.js Environment
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: Install Project Dependencies
      shell: bash 
      run: npm install 

    - name: Run Cypress Tests with Mochawesome
      shell: bash
      run: ${{ inputs.cypress-command }} 
      continue-on-error: ${{ fromJSON(inputs.continue-on-cypress-error) }} 
      
    - name: Debug - List Cypress Results
      if: always() # Ejecutar siempre para depuraci√≥n
      shell: bash
      run: |
        echo "Listing contents of cypress/results:"
        ls -l cypress/results/
        echo "Checking for mochawesome.json size:"
        if [ -f cypress/results/mochawesome.json ]; then
          stat -c %s cypress/results/mochawesome.json
        else
          echo "mochawesome.json not found."
        fi  

    - name: Extract Test Summary
      if: always()
      shell: bash
      run: |
        echo "--- Starting Extract Test Summary ---"
            # Instala 'jq' (procesador de JSON) ya que podr√≠a no estar preinstalado en todos los runners.
            sudo apt-get update && sudo apt-get install -y jq || { echo "ERROR: Failed to install jq. Exiting."; exit 1; }

            # Define la ruta absoluta al archivo de resultados de Mochawesome.
            # GITHUB_WORKSPACE es la ruta donde se clona tu repositorio.
            MOCHAWESOME_RESULTS_DIR="${{ github.workspace }}/cypress/results"
            RESULTS_FILE="${MOCHAWESOME_RESULTS_DIR}/mochawesome.json"
            HTML_FILE="${MOCHAWESOME_RESULTS_DIR}/mochawesome.html"

            echo "Cypress results directory: ${MOCHAWESOME_RESULTS_DIR}"
            echo "Expected JSON file: ${RESULTS_FILE}"
            echo "Expected HTML file: ${HTML_FILE}"

            # Lista el contenido de la carpeta de resultados para depuraci√≥n.
            echo "Contents of cypress/results/ before parsing:"
            ls -al "${MOCHAWESOME_RESULTS_DIR}" || { echo "WARNING: cypress/results directory not found or empty."; }

            # Verifica si el archivo de reporte de Mochawesome existe. Si no, las cuentas por defecto ser√°n 0 y el color ser√° rojo.
            if [ ! -f "$RESULTS_FILE" ]; then
              echo "ERROR: Mochawesome results JSON file '$RESULTS_FILE' not found. Defaulting test counts to 0 and setting color to danger."
              echo "PASSED_TESTS=0" >> $GITHUB_ENV
              echo "FAILED_TESTS=0" >> $GITHUB_ENV
              echo "SKIPPED_TESTS=0" >> $GITHUB_ENV
              echo "PENDING_TESTS=0" >> $GITHUB_ENV 
              echo "TOTAL_TESTS=0" >> $GITHUB_ENV
              echo "SLACK_DYNAMIC_COLOR=danger" >> $GITHUB_ENV # Establece el color a rojo si no se encuentran resultados
              # Esto tambi√©n evitar√° que jq falle al intentar leer un archivo inexistente.
            else
              echo "Mochawesome results JSON file found. Parsing..."
              # Parsea el reporte JSON de Mochawesome para obtener las estad√≠sticas de las pruebas.
              # Usamos `|| echo "0"` para asegurar que si jq no encuentra la clave, el valor por defecto sea 0.
              echo "PASSED_TESTS=$(jq '.stats.passes // 0' "$RESULTS_FILE")" >> $GITHUB_ENV
              echo "FAILED_TESTS=$(jq '.stats.failures // 0' "$RESULTS_FILE")" >> $GITHUB_ENV
              echo "SKIPPED_TESTS=$(jq '.stats.skipped // 0' "$RESULTS_FILE")" >> $GITHUB_ENV
              echo "PENDING_TESTS=$(jq '.stats.pending // 0' "$RESULTS_FILE")" >> $GITHUB_ENV
              echo "TOTAL_TESTS=$(jq '.stats.tests // 0' "$RESULTS_FILE")" >> "$GITHUB_ENV"

              # Determina el color de la notificaci√≥n de Slack bas√°ndose en los fallos de las pruebas.
              if [ "$(jq '.stats.failures // 0' "$RESULTS_FILE")" -gt 0 ]; then
                echo "SLACK_DYNAMIC_COLOR=danger" >> $GITHUB_ENV # Rojo para fallos
              else
                echo "SLACK_DYNAMIC_COLOR=good" >> $GITHUB_ENV  # Verde para √©xito
              fi
              echo "Test counts extracted: Passed=${PASSED_TESTS}, Failed=${FAILED_TESTS}, Skipped=${SKIPPED_TESTS}, Pending=${PENDING_TESTS}, Total=${TOTAL_TESTS}"
            fi

            # Aseg√∫rate de que SLACK_FILE_UPLOAD apunte a donde debe estar el HTML
            echo "Setting SLACK_FILE_UPLOAD to: ${HTML_FILE}"
            echo "SLACK_FILE_UPLOAD=${HTML_FILE}" >> $GITHUB_ENV

            echo "--- Finished Extract Test Summary ---"
    - name: Send Slack Notification
      if: always() 
      uses: rtCamp/action-slack-notify@v2
      env: 
        SLACK_COLOR: ${{ env.SLACK_DYNAMIC_COLOR }} 
        SLACK_USERNAME: ${{ inputs.slack-username }}
        SLACK_ICON: ${{ inputs.slack-icon }}       
        SLACK_MESSAGE: |
          üìä Total: *${{ env.TOTAL_TESTS }}*
          ‚úÖ Passed: *${{ env.PASSED_TESTS }}*
          ‚ùå Failed: *${{ env.FAILED_TESTS }}*
          ‚ö™Ô∏è Skipped: *${{ env.SKIPPED_TESTS }}*
          ‚è≥ Pending: *${{ env.PENDING_TESTS }}*
          
          üîó Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        SLACK_TITLE: ${{ inputs.slack-title }}  
        SLACK_WEBHOOK: ${{ inputs.slack-webhook }} 
        SLACK_FOOTER: '' 
        MSG_MINIMAL: true