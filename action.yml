# action.yml
# This file defines your GitHub Action.
# Make sure the first line 'name:' starts in column 1 (no leading spaces).

name: 'Cypress E2E Regression Tests with Slack Notification'
description: 'Ejecuta pruebas Cypress E2E, genera reportes Mochawesome y notifica los resultados detallados a Slack.'
author: 'Tu Nombre / Tu Organizaci√≥n' # <-- IMPORTANT: Change this to your GitHub username or organization name.

# The 'branding' section defines how your action looks in the GitHub Marketplace.
# You can choose from Octicons for the 'icon' and specific colors.
# See more Octicons here: https://octicons.github.com/
branding:
  icon: 'bell'      # Recommended icon for notifications (e.g., 'bell', 'paper-airplane', 'megaphone')
  color: 'blue'     # Recommended color for notifications (e.g., 'blue', 'green', 'red', 'yellow', 'purple', 'orange', 'gray', 'white')

# The 'inputs' section defines the parameters that users can provide when using your action.
# Each input has a description, a 'required' status, and an optional 'default' value.
inputs:
  node-version:
    description: 'La versi√≥n de Node.js a usar para ejecutar las pruebas Cypress. Ej: "18" o "20".'
    required: false # This input is optional
    default: '18'   # Default Node.js version if not specified by the user

  cypress-command:
    description: 'El comando completo para ejecutar Cypress. √ötil para personalizar opciones como grabar o usar un navegador espec√≠fico.'
    required: false # This input is optional
    default: 'npx cypress run --reporter mochawesome --reporter-options reportDir=cypress/results,overwrite=false,html=true,json=true' # Default Cypress command

  slack-webhook:
    description: '¬°Muy importante! El secreto para tu URL del Webhook de Slack. Debes guardarlo en los Secretos de GitHub del repositorio que use esta acci√≥n.'
    required: true # This input is MANDATORY. The action cannot send Slack notifications without it.

  slack-username:
    description: 'El nombre del bot que aparecer√° en la notificaci√≥n de Slack.'
    required: false # This input is optional
    default: 'CyBot' # Default username for the Slack bot

  slack-icon:
    description: 'La URL de una imagen para el icono del bot en Slack. Esta imagen aparecer√° en la notificaci√≥n de Slack.'
    required: false # This input is optional
    default: 'https://pbs.twimg.com/profile_images/1512090708181725184/KAPAXmDg_400x400.jpg' # Default icon for the Slack bot (Cypress logo)
    # You can change this to your preferred public image URL, e.g., 'https://github.com/your-username.png'

  slack-title:
    description: 'El t√≠tulo principal del mensaje de Slack. Aparecer√° en grande en la notificaci√≥n.'
    required: false # This input is optional
    default: 'Cypress E2E Test Results' # Default title for the Slack notification

  continue-on-cypress-error:
    description: 'Si es "true", la acci√≥n seguir√° ejecut√°ndose (y enviar√° la notificaci√≥n a Slack) incluso si las pruebas de Cypress fallan. Si es "false", la acci√≥n se detendr√° si fallan.'
    required: false # This input is optional
    default: 'true' # Default behavior: always send Slack notification, even if tests fail.

# The 'runs' section defines how your action is executed.
# 'composite' means your action consists of multiple shell commands and other actions.
runs:
  using: "composite" # Indicates this is a composite action, running a sequence of steps.
  steps:
    # Step 1: Checks out the repository's code. This is essential for the action
    # to access your Cypress test files and package.json.
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Sets up the Node.js environment with the specified version.
    - name: Setup Node.js Environment
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }} # Uses the 'node-version' input provided by the user.

    # Step 3: Installs project dependencies (Cypress, Mochawesome, etc.).
    # This step assumes a 'package.json' and 'package-lock.json' (or 'npm-shrinkwrap.json')
    # exist in the repository where this action is being used (and also in THIS action's repo for testing).
    - name: Install Project Dependencies
      shell: bash # Executes the command using bash shell
      run: npm install # 'npm ci' requires a package-lock.json for consistent installs.

    # Step 4: Runs the Cypress tests using the provided command.
    # 'continue-on-error' ensures the workflow proceeds even if Cypress tests fail,
    # so the Slack notification can still be sent.
    - name: Run Cypress Tests with Mochawesome
      shell: bash
      run: ${{ inputs.cypress-command }} # Uses the 'cypress-command' input.
      continue-on-error: ${{ fromJSON(inputs.continue-on-cypress-error) }} # Converts the string input to a boolean.

    # Step 5: Extracts test summary (passes, failures, skipped) from the Mochawesome report.
    # This step runs 'always()' to ensure the Slack notification can be sent even if tests fail or the previous step had an error.
    - name: Extract Test Summary
      if: always() # Ensures this step runs regardless of previous step's outcome.
      shell: bash
      run: |
        # Install 'jq' (JSON processor) as it might not be pre-installed on all runners.
        # This ensures the script can parse the Mochawesome JSON report.
        sudo apt-get update && sudo apt-get install -y jq

        RESULTS_FILE="cypress/results/mochawesome.json"
        
        # Check if the Mochawesome report file exists. If not, default counts to 0 and set color to danger.
        if [ ! -f "$RESULTS_FILE" ]; then
          echo "WARNING: Mochawesome results file '$RESULTS_FILE' not found. Defaulting test counts to 0."
          echo "PASSED_TESTS=0" >> $GITHUB_ENV
          echo "FAILED_TESTS=0" >> $GITHUB_ENV
          echo "SKIPPED_TESTS=0" >> $GITHUB_ENV
          echo "TOTAL_TESTS=0" >> $GITHUB_ENV
          echo "SLACK_DYNAMIC_COLOR=danger" >> $GITHUB_ENV # Set color to red if no results found
        else
          # Parse the Mochawesome JSON report to get test statistics.
          echo "PASSED_TESTS=$(jq '.stats.passes' "$RESULTS_FILE")" >> $GITHUB_ENV
          echo "FAILED_TESTS=$(jq '.stats.failures' "$RESULTS_FILE")" >> $GITHUB_ENV
          echo "SKIPPED_TESTS=$(jq '.stats.skipped' "$RESULTS_FILE")" >> $GITHUB_ENV
          echo "TOTAL_TESTS=$(jq '.stats.tests' "$RESULTS_FILE")" >> "$GITHUB_ENV"

          # Determine the Slack notification color based on test failures.
          if [ "$(jq '.stats.failures' "$RESULTS_FILE")" -gt 0 ]; then
            echo "SLACK_DYNAMIC_COLOR=danger" >> $GITHUB_ENV # Red for failures
          else
            echo "SLACK_DYNAMIC_COLOR=good" >> $GITHUB_ENV  # Green for success
          fi
        fi

    # Step 6: Sends the test results summary to Slack.
    # This step also runs 'always()' to ensure the notification is sent regardless of test outcomes.
# ... (c√≥digo anterior en action.yml) ...

    - name: Extract Test Summary
      if: always() # Ensures this step runs regardless of previous step's outcome.
      shell: bash
      run: |
        sudo apt-get update && sudo apt-get install -y jq

        RESULTS_FILE="cypress/results/mochawesome.json"
        
        if [ ! -f "$RESULTS_FILE" ]; then
          echo "WARNING: Mochawesome results file '$RESULTS_FILE' not found. Defaulting test counts to 0."
          echo "PASSED_TESTS=0" >> $GITHUB_ENV
          echo "FAILED_TESTS=0" >> $GITHUB_ENV
          echo "SKIPPED_TESTS=0" >> $GITHUB_ENV
          echo "PENDING_TESTS=0" >> $GITHUB_ENV # <--- NUEVA L√çNEA: A√±adimos PENDING_TESTS
          echo "TOTAL_TESTS=0" >> $GITHUB_ENV
          echo "SLACK_DYNAMIC_COLOR=danger" >> $GITHUB_ENV
        else
          echo "PASSED_TESTS=$(jq '.stats.passes' "$RESULTS_FILE")" >> $GITHUB_ENV
          echo "FAILED_TESTS=$(jq '.stats.failures' "$RESULTS_FILE")" >> $GITHUB_ENV
          echo "SKIPPED_TESTS=$(jq '.stats.skipped' "$RESULTS_FILE")" >> $GITHUB_ENV
          echo "PENDING_TESTS=$(jq '.stats.pending' "$RESULTS_FILE")" >> $GITHUB_ENV # <--- NUEVA L√çNEA: Extraemos pending
          echo "TOTAL_TESTS=$(jq '.stats.tests' "$RESULTS_FILE")" >> "$GITHUB_ENV"

          if [ "$(jq '.stats.failures' "$RESULTS_FILE")" -gt 0 ]; then
            echo "SLACK_DYNAMIC_COLOR=danger" >> $GITHUB_ENV
          else
            echo "SLACK_DYNAMIC_COLOR=good" >> $GITHUB_ENV
          fi
        fi

- name: Send Slack Notification
      if: always()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: ${{ env.SLACK_DYNAMIC_COLOR }}
        SLACK_USERNAME: ${{ inputs.slack-username }}
        SLACK_ICON: ${{ inputs.slack-icon }}
        SLACK_MESSAGE: |
          *Resultados de Pruebas Cypress*
          
          Commit: `<https://github.com/${{ github.repository }}/commit/${{ github.sha }}>`
          Rama: `${{ github.ref_name }}`
          
          üìä *Resumen de Tests:*
          Total: *${{ env.TOTAL_TESTS }}*
          ‚úÖ Pasadas: *${{ env.PASSED_TESTS }}*
          ‚ùå Fallidas: *${{ env.FAILED_TESTS }}*
          ‚ö™Ô∏è Saltadas: *${{ env.SKIPPED_TESTS }}*
          ‚è≥ Pendientes: *${{ env.PENDING_TESTS }}*
          
          üîó Ver workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        SLACK_TITLE: ${{ inputs.slack-title }}
        SLACK_WEBHOOK: ${{ inputs.slack-webhook }}
        SLACK_FOOTER: '' 
        SLACK_AUTHOR: ''  